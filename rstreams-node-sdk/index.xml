<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RStreams Node SDK on RStreams</title><link>https://rstreams.org/rstreams-node-sdk/</link><description>Recent content in RStreams Node SDK on RStreams</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Apr 2022 11:02:05 +0600</lastBuildDate><atom:link href="https://rstreams.org/rstreams-node-sdk/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started</title><link>https://rstreams.org/rstreams-node-sdk/getting-started/</link><pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate><guid>https://rstreams.org/rstreams-node-sdk/getting-started/</guid><description>ToC
Write a single object to the bus Write multiple objects to the bus Stream multiple objects to the bus fast
Are you setup to run the examples? Expand this section if you&amp;rsquo;re not sure
All examples in the SDK documentation assume that when these apps run, the RStreams SDK can discover the configuration it needs. The config it needs is the AWS resource IDs of the RStreams Bus instance deployed in your AWS account.</description></item><item><title>Streams Primer</title><link>https://rstreams.org/rstreams-node-sdk/streams-primer/</link><pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate><guid>https://rstreams.org/rstreams-node-sdk/streams-primer/</guid><description>ToC
Readable Writeable Duplex Transform or Through
This primer provides exactly enough knowledge of streaming concepts for a developer to successfully write streaming applications using the RStreams SDK and bus. It is not intended as an exhaustive treatise on the vagaries of Node streams. We all have work to do.
Overview There truly is nothing new under the sun. Streaming is really nothing more than Unix pipes, albeit in a more distributed manner, invented more than 50 years ago.</description></item><item><title>SDK Streams</title><link>https://rstreams.org/rstreams-node-sdk/sdk-streams/</link><pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate><guid>https://rstreams.org/rstreams-node-sdk/sdk-streams/</guid><description>ToC
enrichEvent When would I use this? Runnable Examples offload putEvent checkpoint : WritableStream read : ReadableStream createSource : ReadableStream write : TransformStream load : WritableStream
You need to understand what a pipe and stream step in that pipe is AND nothing comes for free. The cost of working with large amounts of data in near real-time environments with RStreams is you have to think about what you are doing and what it means with respect to reading and writing.</description></item><item><title>Read/Write at Scale</title><link>https://rstreams.org/rstreams-node-sdk/read-write-scale/</link><pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate><guid>https://rstreams.org/rstreams-node-sdk/read-write-scale/</guid><description>ToC
App Use Cases and Considerations Config to the Rescue Considerations Config to the Rescue
You need to understand what a pipe and stream step in a pipe are.
Overview The RStreams Node SDK includes a simple utility function to create pipes and nearly every kind of stream you&amp;rsquo;d need to work with massive amounts of continuously generated data in an instance of the RStreams bus.</description></item></channel></rss>