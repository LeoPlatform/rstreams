<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Core Concepts on RStreams</title><link>https://rstreams.org/rstreams-guides/core-concepts/</link><description>Recent content in Core Concepts on RStreams</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Apr 2022 11:02:05 +0600</lastBuildDate><atom:link href="https://rstreams.org/rstreams-guides/core-concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Event Streaming Primer</title><link>https://rstreams.org/rstreams-guides/core-concepts/event-streaming-primer/</link><pubDate>Mon, 04 Apr 2022 11:02:05 +0600</pubDate><guid>https://rstreams.org/rstreams-guides/core-concepts/event-streaming-primer/</guid><description>One cannot understand the problems RStreams solves or reason about its implementation/usage without a fundamental understanding of event streaming compared to traditional microservices approaches.
Summary Some systems work with parties that are constantly generating new data. Client data flowing from these parties tends to flow in a sequential order that we call an event stream. The events in this stream get transformed, enriched, and used to trigger subsequent events. Event stream processing, in concert with general purpose messaging, is a loosely coupled, scalable pattern ideal for designing enterprise systems built to handle continuous data flow.</description></item></channel></rss>