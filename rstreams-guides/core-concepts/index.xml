<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Core Concepts on RStreams</title><link>https://rstreams.org/rstreams-guides/core-concepts/</link><description>Recent content in Core Concepts on RStreams</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 19 May 2022 17:55:12 +0000</lastBuildDate><atom:link href="https://rstreams.org/rstreams-guides/core-concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Event Streaming Primer</title><link>https://rstreams.org/rstreams-guides/core-concepts/event-streaming-primer/</link><pubDate>Thu, 19 May 2022 17:55:12 +0000</pubDate><guid>https://rstreams.org/rstreams-guides/core-concepts/event-streaming-primer/</guid><description>ToC
Summary What&amp;rsquo;s a Stream Continuous data systems before event streaming Event streaming compared to APIs One cannot understand the problems RStreams solves or reason about its implementation/usage without a fundamental understanding of event streaming compared to traditional microservices approaches.
Summary Some systems work with parties that are constantly generating new data. Client data flowing from these parties tends to flow in a sequential order that we call an event stream.</description></item><item><title>Fundamentals</title><link>https://rstreams.org/rstreams-guides/core-concepts/fundamentals/</link><pubDate>Thu, 19 May 2022 17:55:12 +0000</pubDate><guid>https://rstreams.org/rstreams-guides/core-concepts/fundamentals/</guid><description>ToC
Event Queue The Bus Bot Event ID Pipe Pipe Stream Step Stream Checkpoint Event source timestamp Correlation ID Stage System Event All data that is sent to an RStreams queue is an event. Each event exists to wrap the data contained in the payload attribute. Queues hold events of a consistent type, such as all Employee objects or all Change Order request objects for example.
Queue RStreams is factored around queues.</description></item><item><title>Event Handling Semantics</title><link>https://rstreams.org/rstreams-guides/core-concepts/event-handling-semantics/</link><pubDate>Thu, 19 May 2022 17:55:12 +0000</pubDate><guid>https://rstreams.org/rstreams-guides/core-concepts/event-handling-semantics/</guid><description>ToC
RStreams was designed so that a developer can register a bot (lambda function) that the RStreams Bus will invoke whenever there are new events to be read from a given queue.
It is expected that events could be, and often will be, continuously being produced and flowing into a queue.
So, the desire is for your bot to be invoked and get new events from the a queue and process them, doing this for as long as it safely can before shutting itself down.</description></item><item><title>Event IDs &amp; Searching</title><link>https://rstreams.org/rstreams-guides/core-concepts/event-ids/</link><pubDate>Thu, 19 May 2022 17:55:12 +0000</pubDate><guid>https://rstreams.org/rstreams-guides/core-concepts/event-ids/</guid><description>ToC
Summary Event IDs Searching Summary All RStreams events have a system-generated event ID, also known as eid. This is set on an event when the event is first processed into a queue by RStreams, using the date/time of that ingestion as the basis of the ID.
Event IDs An event ID, again also called eid, uniquely identifies the position of a data event in a queue and the date/time part of the event ID is in UTC.</description></item></channel></rss>